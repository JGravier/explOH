addMarkers(data=test)
test <- OH_geom[st_geometry_type(OH_geom)=="MULTIPOLYGON",]
leaflet() %>%
addMarkers(data=test)
leaflet() %>%
addPolygons(data=test)
test <- OH_geom[st_geometry_type(OH_geom)=="MULTILINESTRING",]
leaflet() %>%
addPolylines(data=test)
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",]
leaflet() %>%
addCircleMarkers(data=test)
leaflet() %>%
addCircles(data=test)
plot(test)
class(test)
View(test)
attr(test, "geometry")
attr(test, "sf_column")
print(test, n=3)
st_geometry_type(test)
test <- OH_geom[st_geometry_type(OH_geom)=="POLYGON",]
leaflet() %>%
add(data=test)
leaflet() %>%
addPolygons(data=test)
st_geometry_type(test)
test <- OH_geom[st_geometry_type(OH_geom)=="MULTIPOLYGON",]
leaflet() %>%
addPolygons(data=test)
st_geometry_type(test)
levels(st_geometry_type(test))
summary(st_geometry_type(test))
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",]
summary(st_geometry_type(test))
leaflet() %>%
addPolygons(data=test)
leaflet() %>%
addMarkers(data=test)
test <- OH_geom[st_geometry_type(OH_geom)=="MULTIPOLYGON",]
leaflet() %>%
addMarkers(data=test)
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",]
debug(addCircles)
leaflet() %>%
addCircles(data=test)
str(data)
test <- test[1,]
View(test)
leaflet() %>%
addCircles(data=test)
debug(addCircles)
leaflet() %>%
addCircles(data=test)
str(data)
debug(derivePoints)
leaflet() %>%
addCircles(data=test)
leaflet() %>%
addCircles(data=test)
leaflet() %>%
addCircles(data=test)
leaflet() %>%
addCircles(data=test)
test <- OH_geom[st_geometry_type(OH_geom)=="MULTIPOLYGON",]
debug(addPolygons)
leaflet() %>%
addPolygons(data=test)
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",]
test <- test[1,]
debug(addCircles)
leaflet() %>%
addCircles(data=test)
leaflet() %>%
addCircles(data=test)
leaflet() %>%
addCircles(data=test)
leaflet() %>%
addCircles(data=test)
str(data)
leaflet() %>%
addCircles(data=test)
str(data)
runApp()
undebug(addPolygons)
undebug(addCircles)
runApp()
undebug(derivePoints)
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",] %>% cast("POINT")
leaflet() %>%
addCircles(data=test)
library(shiny)
library(leaflet)
library(dplyr)
library(tidyr)
library(shinythemes)
library(reshape2)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(shinyjs)
library(RSQLite)
library(rgdal)
library(rgeos)
library(sf)
source("charge_data.R", local=FALSE)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",] %>% cast("POINT")
library(shiny)
library(leaflet)
library(dplyr)
# library(tidyr)
# library(shinythemes)
# library(reshape2)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(shinyjs)
#SQl to R
library(RSQLite)
library(rgdal)
# library(rgeos)
library(sf)
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",] %>% cast("POINT")
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",] %>% st_cast("POINT")
leaflet() %>%
addCircles(data=test)
testB<- OH_geom %>%
filter(DATE_DEB<=200) %>%
filter(DATE_FIN>=100) %>%
filter(V_URB %in% c(2,3))
View(testB)
leaflet() %>%
addCircles(data=testB)
testB <- testB[st_geometry_type(testB)=="POINT",] %>% st_cast("POINT")
leaflet() %>%
addCircles(data=testB)
runApp()
read.table("test")
runApp()
nrow(testB)
read.table("test")
runApp()
read.table("test")
runApp()
read.table("test")
runApp()
leaflet() %>%
addCircles(data=OH_pt2)
runApp()
testB<- OH_geom %>%
filter(DATE_DEB<=1481) %>%
filter(DATE_FIN>=467)
testB <- testB[st_geometry_type(testB)=="POINT",] %>% st_cast("POINT")
leaflet() %>%
addCircles(data=OH_pt2)
nrow(testB)
View(testB)
leaflet() %>%
addCircles(data=OH_pt2)
summary(st_geometry_type(testB))
View(testB)
testB <- testB[st_geometry_type(testB)=="POINT",] %>% st_cast("POINT")
library(shiny)
library(leaflet)
library(dplyr)
# library(tidyr)
# library(shinythemes)
# library(reshape2)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(shinyjs)
#SQl to R
library(RSQLite)
library(rgdal)
# library(rgeos)
library(sf)
testB <- testB[st_geometry_type(testB)=="POINT",] %>% st_cast("POINT")
View(testB)
leaflet() %>%
addCircles(data=testB)
nrow(subset(OH_ponctuels_4326, DATE_DEB<=max(100) & DATE_FIN>=min(50) & V_URB %in% c(3)))
nrow(subset(OH_geom, DATE_DEB<=max(100) & DATE_FIN>=min(50) & V_URB %in% c(3)))
testB <- subset(OH_geom, DATE_DEB<=max(100) & DATE_FIN>=min(50) & V_URB %in% c(3))
nrow(testB)
testB <- testB[st_geometry_type(testB)=="POINT",] %>% st_cast("POINT")
nrow(testB)
leaflet() %>%
addCircles(data=testB)
read.table("test")
testB <- test
nrow(testB)
testB <- testB[st_geometry_type(testB)=="POINT",] %>% st_cast("POINT")
nrow(testB)
leaflet() %>%
addCircles(data=testB)
runApp()
1+1
runApp()
read.table("test")
nrow(test)
leaflet() %>%
addCircles(data=testB)
leaflet() %>%
addCircles(data=test)
runApp()
test <- read.table("test")
test
runApp()
test <- read.table("test")
runApp()
test <- read.table("test")
View(test)
runApp()
EF <- st_read(dsn="./data/OH_3geom.sqlite", layer="EF", quiet=TRUE)
View(EF)
unique(EF$V_urbaine)
capitalize(unique(EF$V_urbaine))
touper(unique(EF$V_urbaine))
toupper(unique(EF$V_urbaine))
toupper(substring(unique(EF$V_urbaine))1,1)
toupper(substring(unique(EF$V_urbaine)),1,1)
toupper(substring("hahahahihih hahaha"),1,1)
toupper(substring("hahahahihih hahaha"),1)
library(stringi)
str_to_title("hahaha")
library(stringr)
str_to_title("hahaha")
str_to_title(unique(EF$V_urbaine))
unique(EF$V_urbaine[EF$Code_EF < 70] )
stri_trans_totitle(unique(EF$V_urbaine[EF$Code_EF < 70]), locale="fr")
stri_trans_totitle(unique(EF$V_urbaine[EF$Code_EF < 70]), opts_brkiter = skip_sentence_sep)
stri_trans_totitle(unique(EF$V_urbaine[EF$Code_EF < 70]), opts_brkiter = sentence)
stri_opts_brkiter(type = sentence)
stri_opts_brkiter(type = "sentence")
stri_trans_totitle(unique(EF$V_urbaine[EF$Code_EF < 70]), opts_brkiter = stri_opts_brkiter(type = "sentence"))
paste(c(1:6), raw_vurb)
raw_vurb <- stri_trans_totitle(unique(EF$V_urbaine[EF$Code_EF < 70]), opts_brkiter = stri_opts_brkiter(type = "sentence"))
paste(c(1:6), raw_vurb)
paste(c(1:6),". ", raw_vurb, sep="")
paste(c(1:6),".", raw_vurb, sep="")
is.null(unique(EF$V_urbaine))
unique(EF$V_urbaine[EF$Code_EF %in% [10:60])
(EF$V_urbaine[EF$Code_EF %in% [10:60]])
EF$V_urbaine[EF$Code_EF %in% [10:60]]
EF$V_urbaine[EF$Code_EF %in% [10:60],]
EF$V_urbaine[EF$Code_EF %in% (10:60),]
EF$V_urbaine[EF$Code_EF %in% (10:60)]
unique(EF$V_urbaine[EF$Code_EF %in% (10:60)])
unique(EF[EF$Code_EF %in% (10:60), EF$V_urbaine])
unique(EF[EF$Code_EF %in% (10:60), c("V_urbaine", "Code_Ef"])
raw_vurb <- stri_trans_totitle(unique(EF$V_urbaine[EF$Code_EF %in% [10:60]]), opts_brkiter = stri_opts_brkiter(type = "sentence"))
list_vurb <- paste(c(1:6),".", raw_vurb, sep="")
EF[EF$Code_EF %in% (10:60), c("V_urbaine", "Code_Ef"]
)
unique(
EF[EF$Code_EF %in% (10:60), c("V_urbaine", "Code_Ef")]
)
unique(
EF[EF$Code_EF %in% (10:60), c("V_urbaine", "Code_EF")]
)
unique(
EF[EF$Code_EF %in% seq(10:60, 10), c("V_urbaine", "Code_EF")]
)
seq(10,60,10)
unique(
EF[EF$Code_EF %in% seq(10,60,10), c("V_urbaine", "Code_EF")]
)
substring()
substring("Code_EF", 1,1)
sub_EF <- EF[EF$Code_EF %in% seq(10,60,10), c("V_urbaine", "Code_EF")]
substring(sub_EF$Code_EF,1,1)
paste (sub_EF$V_urbaine, sub_EF$Code_EF)
paste (substring(sub_EF$Code_EF,1,1),sub_EF$V_urbaine)
paste (substring(sub_EF$Code_EF,1,1),".",sub_EF$V_urbaine,"")
paste (substring(sub_EF$Code_EF,1,1),".",sub_EF$V_urbaine,sep="")
paste(
substring(sub_EF$Code_EF,1,1), # vurb en 1,2,3
".",
stri_trans_totitle(sub_EF$V_urbaine),
sep="") #nom vurb avec capitale
paste(
substring(sub_EF$Code_EF,1,1), # vurb en 1,2,3
".",
stri_trans_totitle(sub_EF$V_urbaine, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
#librairies generales
library(shiny)
library(leaflet)
library(dplyr)
# library(tidyr)
# library(shinythemes)
# library(reshape2)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(shinyjs)
#SQl to R
library(RSQLite)
library(rgdal)
# library(rgeos)
library(sf)
EF <- st_read(dsn="./data/OH_3geom.sqlite", layer="EF", quiet=TRUE)
View(EF)
sub_EF <- EF[EF$Code_EF %in% seq(10,60,10), c("V_urbaine", "Code_EF")]
liste_vurb <- paste(
substring(sub_EF$Code_EF,1,1), # vurb en 1,2,3
".",
stri_trans_totitle(sub_EF$V_urbaine, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
library(stringi)
liste_vurb <- paste(
substring(sub_EF$Code_EF,1,1), # vurb en 1,2,3
".",
stri_trans_totitle(sub_EF$V_urbaine, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
liste_vurb
order(liste_vurb)
order(liste_vurb, dreceasing=FALSE)
sort.list(liste_vurb)
liste_vurb
liste_vurb <- sort.list(liste_vurb)
liste_vurb
liste_vurb <- paste(
substring(sub_EF$Code_EF,1,1), # vurb en 1,2,3
".",
stri_trans_totitle(sub_EF$V_urbaine, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
liste_vurb <- order(liste_vurb)
liste_vurb
liste_vurb <- paste(
substring(sub_EF$Code_EF,1,1), # vurb en 1,2,3
".",
stri_trans_totitle(sub_EF$V_urbaine, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
liste_vurb
as.vector(liste_vurb )
order(as.vector(liste_vurb))
list_vurb
liste_vurb <- order(liste_vurb)
liste_vurb <- paste(
substring(sub_EF$Code_EF,1,1), # vurb en 1,2,3
".",
stri_trans_totitle(sub_EF$V_urbaine, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
liste_vurb <- liste_vub[order(liste_vurb)]
liste_vurb <- liste_vurb[order(liste_vurb)]
liste_vurb
unique (OH_geom$V_USAGE)
sub_vusage <- EF[EF$Code_EF %in% unique(OH_geom$V_USAGE), c("Code_EF", "v_usage")]#pour le moment car nom_usages pas bon pour 41 et 43 (?)
sub_vusage <- EF[EF$Code_EF %in% unique(OH_geom$V_USAGE), c("Code_EF", "V_usage")]#pour le moment car nom_usages pas bon pour 41 et 43 (?)
sub_vusage
rm(test)
rm(testB)
rm(sub_EF)
rm(list_vurb)
rm(rax_vurb)
rm(raw_vurb)
liste_vusage <- paste(sub_vusage$Code_EF,
".",
stri_trans_totitle(sub_EF$V_usage, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
sub_vurb <- EF[EF$Code_EF %in% seq(10,60,10), c("V_urbaine", "Code_EF")]
liste_vurb <- paste( substring(sub_vurb$Code_EF,1,1), # vurb en 1,2,3
".", stri_trans_totitle(sub_vurb$V_urbaine, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
liste_vurb <- liste_vurb[order(liste_vurb)]
liste_vurb
sub_vusage <- EF[EF$Code_EF %in% unique(OH_geom$V_USAGE), c("Code_EF", "V_usage")]#pour le moment car nom_usages pas bon pour 41 et 43 (?)
liste_vusage <- paste(sub_vusage$Code_EF,
".",
stri_trans_totitle(sub_vusage$V_usage, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
liste_vusage <- liste_vusage[order(liste_vusage)]
liste_vusage
shiny::runApp()
runApp()
shiny::runApp()
runApp()
View(OH_pt)
runApp()
shiny::runApp(display.mode = "showcase")
runApp()
shiny::runApp(display.mode = "showcase")
options(shiny.reactlog=TRUE)
runApp()
options(shiny.erro)
options(shiny.error=browser)
runApp()
options(shiny.error = NULL)
runApp()
shiny::runApp()
isolate(OH_subset$tab_add)
runApp()
install.packages(c("backports", "car", "checkmate", "circlize", "cowplot", "curl", "DBI", "desc", "devtools", "dplyr", "evaluate", "explor", "fields", "Formula", "gdata", "git2r", "GlobalOptions", "GWmodel", "htmlwidgets", "httpuv", "igraph", "irlba", "knitr", "mapproj", "maps", "mapview", "mclust", "mgcv", "plotly", "purrr", "quantmod", "R6", "Rcpp", "RcppArmadillo", "rgdal", "rmarkdown", "RNetLogo", "RSQLite", "sandwich", "satellite", "sf", "shinyjs", "sp", "spam", "spbabel", "spdplyr", "sqldf", "tibble", "tidyr", "TTR", "units", "webshot", "withr", "xts"))
runApp()
library(shiny)
sessionInfo()
library(shiny)
library(ggplot2)
library("shiny", lib.loc="~/R/win-library/3.3")
update.packages()
shiny::runApp()
runApp()
class(OH_pt_sp)
leaflet() %>% addCircles(OH_pt_sp)
leaflet() %>% addCircles(OH_pt)
Oh_pt
OH_pt
class(OH_pt)
head(OH_pt)
runApp()
leaflet() %>% addCircles(OH_pt_pg)
leaflet() %>% addCircles(OH_pt)
Oh_pt
OH_pt
Q
c
Q
runApp()
Q
shiny::runApp()
runApp()
leaflet() %>% addCircles(OH_pt)
isolate(OH_pt)
isolate(leaflet() %>% addCircles(OH_pt))
OH_pt
c
n
shiny::runApp()
runApp()
shiny::runApp()
runApp()
test <- OH_geom [1,]
test
View(test)
rbind(test,"NULL")
rbind(test,NULL)
null_row <- head(df[1,][NA])
null_row <- head(df[1,][NA,])
null_row <- head(test[1,][NA,])
null_row <- head(test[1,], 1)
null_row
null_row <-test[1,][NA,]
null_row <- NULL
null_row
null_row <-test[1,]
null_row <- NA
null_row
null_row <- test[1,]
null_row[1,] <- NA
null_row <- test[1,]
null_row[1,] <- NA
null_row[1,]
null_row[1,1] <- NA
null_row
null_row[1,1:17] <- NA
sapply(null_row, function(1:17) [null_row[,i] <- NA)
rbind(test,NULL)
null_row <- test[1,]
sapply(null_row, function(1:17) [null_row[,i] <- NA)
rbind(test,NULL)
apply(null_row, 2, [null_row[,i] <- NA)
rbind(test,NULL)
apply(null_row, 2, null_row[,i] <- NA)
apply(null_row, 2, function(x) null_row[,x] <- NA)
null_row <- test[1,]
apply(null_row, 2, function(x) null_row[,x] <- NA)
apply(null_row, 2, function(x) length(x[x<0]))
apply(null_row, 2, function(x) is.matrix(x))
null_row <- test[,1]
null_row <- test[1,]
null_row[,1]
null_row[1,]
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
View(test)
test <- OH_geom[1,]
View(test)
null_row <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
null_row
test
test <- OH_geom[7,]
test
test <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
null_row <- test
null_row[,1] <- NA
for (i in 1:17){null_row[,x] <- NA}
for (i in 1:17){null_row[,i] <- NA}
null_row
View(null_row)
runApp()
OH_geom[,17]
OH_geom[1,17]
OH_geom[1,16]
null_row
OH_geom[1,17]
View(OH_geom[1])
View(OH_geom[1,])
View(OH_geom[1,17])
View(OH_geom[1,18])
View(OH_geom[1,1])
for (i in 1:16) {null_row[,i] <- NA}
null_row <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
for (i in 1:16) {null_row[,i] <- NA}
null_row
runApp()
