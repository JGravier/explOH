"xslx",
"compare",
"devtools",
"knitr",
"jsonlite",
"markdown",
"prettyunits",
"sp",
"svglite",
"tidyverse",
"tinytex",
"utf8",
"webshot",
"zip"))
shiny::runApp()
par(bg = "#EFEFEF")
A2Rplot(
x=CAH,
k = input$nombre_classes,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
par(bg = "#EFEFEF")
output$plot_dendro <- renderPlot(
A2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
A2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
A2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
palette_dendro <- palette_CAH(4)
browser()
par(bg = "#EFEFEF")
A2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
runApp()
#---- LIBRAIRIES ----
#librairies generales
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(shinydashboard)
library(htmlwidgets)
library(leaflet)
library(RSQLite)
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(shinydashboard)
library(htmlwidgets)
library(leaflet)
library(RSQLite)
library(dplyr)
library(dplyr)
library(tidyr)
library(DT)
library(reshape2)
library(reshape2)
library(ggplot2)
library(reshape2)
library(ggplot2)
library(ggrepel)
library(ggthemes)
library(ggdendro)
library(RColorBrewer)
library(grid)
library(gridExtra)
library(cowplot)
library(scatterD3)
library(stringi)
library(stringr)
library(ade4)
#Spatialobjects
library(rgdal)
library(sf)
library(rgdal)
install.packages(c("shinyjs",
"shinyWidgets",
"shiny",
"shinydashboard",
"leaflet",
"RSQLite",
"DT",
"ggthemes",
"ggdendro",
"cowplot",
"scatterD3",
"ade4",
"rgdal",
"sf",
"rgdal"))
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyWidgets)
shinyWidgetsGallery()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
OH_geom$FIAB_DISP)
levels(OH_geom$FIAB_DISP)
levels(OH_geom$FIAB_APP)
View(OH_geom)
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP < ""]
#recodage de la fiab disp des OH qui se finissent en 2015
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP < ""] <- 0
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP  == ""]
levels(OH_geom$FIAB_DISP)
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP  != c("1","2","3","4")]
OH_geom$FIAB_DISP
#recodage de la fiab disp des OH qui se finissent en 2015
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP is.na()] <- 0
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP is NA]
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == NA]
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == NULL]
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == "1"]
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == "2"]
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == ""]
#recodage de la fiab disp des OH qui se finissent en 2015
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == ""] <- 0
levels(OH_geom$FIAB_DISP)
summary(OH_geom$FIAB_DISP)
OH_geom <- OH_geom_base[OH_geom_base$V_USAGE != 11
& OH_geom_base$V_USAGE < 70
& OH_geom_base$DATE_FIN > -25,]
#reprojection pour leaflet
OH_geom <- st_transform(OH_geom,proj_4326)
#ajout d'une colonne valeur urb = V_URB =>> MAPPLY ?
OH_geom$V_URB <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c(1,2,3,4,5,6),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom valeur urb = V_URB_NOM
OH_geom$V_URB_NOM <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c("1.voirie, aménagement",
"2.structures défensives et militaires",
"3.constructions civiles",
"4.édifices religieux",
"5.lieux d'inhumation",
"6.lieux de commerce, artisanat, production"),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom portee = V_URB_NOM
OH_geom$PORTEE_NOM <- cut (OH_geom$PORTEE,
breaks=c(1,2,3,4,5),
labels=c("1.petite - quartier",
"2.moyenne - ville",
"3.grande - région",
"4.exceptionnelle - pays"),
right=FALSE,
include.lowest = TRUE)
#recodage de la plus petite date = -25 # voir si nécessaire fausse les données...
OH_geom$DATE_DEB[OH_geom$DATE_DEB < -25] <- -25
summary(OH_geom$FIAB_DISP)
#recodage de la fiab disp des OH qui se finissent en 2015
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == ""] <- 0
summary(OH_geom$FIAB_DISP)
droplevels(OH_geom$FIAB_DISP)
OH_geom$FIAB_DISP
levels(OH_geom$FIAB_DISP)
droplevels(levels(OH_geom$FIAB_DISP))
OH_geom <- OH_geom_base[OH_geom_base$V_USAGE != 11
& OH_geom_base$V_USAGE < 70
& OH_geom_base$DATE_FIN > -25,]
#reprojection pour leaflet
OH_geom <- st_transform(OH_geom,proj_4326)
#ajout d'une colonne valeur urb = V_URB =>> MAPPLY ?
OH_geom$V_URB <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c(1,2,3,4,5,6),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom valeur urb = V_URB_NOM
OH_geom$V_URB_NOM <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c("1.voirie, aménagement",
"2.structures défensives et militaires",
"3.constructions civiles",
"4.édifices religieux",
"5.lieux d'inhumation",
"6.lieux de commerce, artisanat, production"),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom portee = V_URB_NOM
OH_geom$PORTEE_NOM <- cut (OH_geom$PORTEE,
breaks=c(1,2,3,4,5),
labels=c("1.petite - quartier",
"2.moyenne - ville",
"3.grande - région",
"4.exceptionnelle - pays"),
right=FALSE,
include.lowest = TRUE)
#recodage de la plus petite date = -25 # voir si nécessaire fausse les données...
OH_geom$DATE_DEB[OH_geom$DATE_DEB < -25] <- -25
#recodage de la fiab disp des OH qui se finissent en 2015
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == ""] <- 0
droplevels(levels(OH_geom$FIAB_DISP))
OH_geom$FIAB_DISP
levels(OH_geom$FIAB_DISP)
OH_geom$FIAB_DISP <- as.character()
OH_geom$FIAB_DISP <- as.character(OH_geom$FIAB_DISP)
OH_geom$FIAB_DISP
OH_geom$FIAB_DISP <- as.factor(OH_geom$FIAB_DISP)
OH_geom$FIAB_DISP
levels(OH_geom$FIAB_DISP)
OH_geom_base <- rbind(points,lignes,polygones)
OH_geom <- OH_geom_base[OH_geom_base$V_USAGE != 11
& OH_geom_base$V_USAGE < 70
& OH_geom_base$DATE_FIN > -25,]
#reprojection pour leaflet
OH_geom <- st_transform(OH_geom,proj_4326)
#ajout d'une colonne valeur urb = V_URB =>> MAPPLY ?
OH_geom$V_URB <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c(1,2,3,4,5,6),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom valeur urb = V_URB_NOM
OH_geom$V_URB_NOM <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c("1.voirie, aménagement",
"2.structures défensives et militaires",
"3.constructions civiles",
"4.édifices religieux",
"5.lieux d'inhumation",
"6.lieux de commerce, artisanat, production"),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom portee = V_URB_NOM
OH_geom$PORTEE_NOM <- cut (OH_geom$PORTEE,
breaks=c(1,2,3,4,5),
labels=c("1.petite - quartier",
"2.moyenne - ville",
"3.grande - région",
"4.exceptionnelle - pays"),
right=FALSE,
include.lowest = TRUE)
#recodage de la plus petite date = -25 # voir si nécessaire fausse les données...
OH_geom$DATE_DEB[OH_geom$DATE_DEB < -25] <- -25
#recodage de la fiab disp des OH qui se finissent en 2015
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == ""] <- 0
OH_geom$FIAB_DISP
summary(droplevels(OH_geom$FIAB_DISP))
#recodage de la fiab disp des OH qui se finissent en 2015
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == ""] <- 0
OH_geom$FIAB_DISP <- droplevels(OH_geom$FIAB_DISP)
summary(OH_geom$FIAB_DISP)
OH_geom <- OH_geom_base[OH_geom_base$V_USAGE != 11
& OH_geom_base$V_USAGE < 70
& OH_geom_base$DATE_FIN > -25,]
#reprojection pour leaflet
OH_geom <- st_transform(OH_geom,proj_4326)
#ajout d'une colonne valeur urb = V_URB =>> MAPPLY ?
OH_geom$V_URB <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c(1,2,3,4,5,6),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom valeur urb = V_URB_NOM
OH_geom$V_URB_NOM <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c("1.voirie, aménagement",
"2.structures défensives et militaires",
"3.constructions civiles",
"4.édifices religieux",
"5.lieux d'inhumation",
"6.lieux de commerce, artisanat, production"),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom portee = V_URB_NOM
OH_geom$PORTEE_NOM <- cut (OH_geom$PORTEE,
breaks=c(1,2,3,4,5),
labels=c("1.petite - quartier",
"2.moyenne - ville",
"3.grande - région",
"4.exceptionnelle - pays"),
right=FALSE,
include.lowest = TRUE)
#recodage de la plus petite date = -25 # voir si nécessaire fausse les données...
OH_geom$DATE_DEB[OH_geom$DATE_DEB < -25] <- -25
#recodage de la fiab disp des OH qui se finissent en 2015
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == ""] <- 0
OH_geom$FIAB_DISP <- droplevels(OH_geom$FIAB_DISP)
summary(OH_geom$FIAB_DISP)
#----------------------------------- 3. Listes vurb et vusage ----
EF <- st_read(dsn="./data/OH_3geom.sqlite", layer="EF", quiet=TRUE)
runApp()
legende$pal_couleurs()
palette_fiab_a
palette_portee
palette_portees
couleurs_fiab, order(levels(OH_geom$FIAB_APP)
couleurs_fiab, order(levels(OH_geom$FIAB_APP))
colorFactor(couleurs_fiab, order(levels(OH_geom$FIAB_APP)))
palette_fiab_a(c(1,2,3,4))
palette_fiab_a(c(1,2,3,4,5))
palette_fiab_a(c(1,2,3,4,5,6))
palette_fiab_a(c("1","2"))
palette_fiab_a(c("1","3"))
palette_fiab_a(c("1","6"))
palette_fiab_a(c("1","4"))
as.factor(OH_geom$FIAB_DISP)
Oh_subset$tab_add$FIAB_APP
OH_subset$tab_add$FIAB_APP
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
OH_zone <- read.csv("D:/Sync/1recherche/1these/SIG/VISU/shiny/explOH_13/data/OH_zone.csv", encoding="UTF-8", header=FALSE)
View(OH_zone)
#OH pour analyse zone
OH_zone <- read.csv("./data/OH_zone.csv", encoding="UTF-8", header=TRUE)
OH_zone
View(OH_zone)
rm(OH_zone)
#OH pour analyse zone
OH_zones <- read.csv("./data/OH_zone.csv", encoding="UTF-8", header=TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
val_usage
runApp()
paste("OH de valeur d'usage :", val_usage)
substring(
eval(parse(text=paste("input$picker_zones_",i,sep=""))), #récupère toutes les options cochées
1,2 #ne garde que les deux premiers caractères (=les numéros)
)
1:6,
function(i){
substring(
eval(parse(text=paste("input$picker_zones_",i,sep=""))), #récupère toutes les options cochées
1,2 #ne garde que les deux premiers caractères (=les numéros)
)
})
val_usage <- lapply(
1:6,
function(i){
substring(
eval(parse(text=paste("input$picker_zones_",i,sep=""))), #récupère toutes les options cochées
1,2 #ne garde que les deux premiers caractères (=les numéros)
)
})
aste("OH de valeur d'usage :", val_usage)
paste("OH de valeur d'usage :", val_usage)
val_usage
val_usage <- lapply(
1:6,
function(i){
substring(
eval(parse(text=paste("input$picker_zones_",i,sep=""))), #récupère toutes les options cochées
1,2 #ne garde que les deux premiers caractères (=les numéros)
)
}) %>% unlist %>% as.numeric
val_usage
paste("a",val_usage)
paste(val_usage)
paste("a",paste(val_usage))
paste(val_usage, ",")
reduce(val_usage)
Reduce(val_usage)
merge(val_usage)
unlist(val_usage)
paste("OH de valeur d'usage :", unlist(val_usage))
val_usage
val_usage[1]
join(val_usage)
join(val_usages)
,.joint(val_usahes)
,.joint(val_usages)
.joint(val_usages)
.join(val_usages)
paste(val_usage, sep = '', collapse = '')
paste(val_usage, sep = ' ', collapse = '')
paste(val_usage, sep = ' ')
paste(val_usage, sep = ' ,', collapse = '')
paste(val_usage, sep = ' ,', collapse = ' ,')
paste(val_usage, sep = '', collapse = ', ')
paste("OH de valeur d'usage :", paste(val_usage, sep = '', collapse = ', '))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("ggdendro")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinycssloaders")
library(shinycssloaders)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
passwordInput("password", "Password:"),
actionButton("go", "Go"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({
req(input$go)
isolate(input$password)
})
}
shinyApp(ui, server)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(OH_zones)
runApp()
runApp()
#shapefiles contextes
ens_urb_total <- read_sf(".data/ens_urbain.geojson")
#shapefiles contextes
ens_urb_total <- st_read(".data/ens_urbain.geojson")
#shapefiles contextes
ens_urb_total <- read_sf(".data/ens_urbain.geojson", quiet=FALSE)
#shapefiles contextes
ens_urb_total <- read_sf("./data/ens_urbain.geojson", quiet=FALSE)
#shapefiles contextes
ens_urb_total <- read_sf("./data/ens_urbain.geojson", quiet=TRUE)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
unique(ens_urb$densite)
levels(ens_urb$densite)
runApp()
runApp()
runApp()
runApp()
previewColors(colorFactor(couoeurs_EU2),c("1","2","3"))
previewColors(colorFactor(couleurs_EU2,c("1","2","3"))
)
previewColors(colorFactor(couleurs_EU2,c("1","2","3")))
previewColors(colorFactor(couleurs_EU2, c("1","2","3")))
previewColors(colorFactor(couleurs_fiab, rev(order(levels(OH_geom$FIAB_DISP)))))
couleurs_EU
couleurs_EU2
runApp()
runApp()
runApp()
runApp()
runApp()
