runApp()
biplot_col
biplot_col$color_var <- str_sub(row.names(biplot_col), start=-2, end=-2)
biplot_col
liste_var <- sort(unique(as.character(OH_geom$V_URB_NOM)))
liste_var
liste_var <- liste(c(1:6), sort(unique(as.character(OH_geom$V_URB_NOM))))
liste_var <- list(c(1:6), sort(unique(as.character(OH_geom$V_URB_NOM))))
liste_var
runApp()
runApp()
runApp()
biplot_col
View(biplot_col)
option(bitmapType = 'cairo')
getOption('bitmapType')
png(tempfile(), type='cairo'); dev.off()
tab_biplot <- rbind(biplot_li, biplot_col)
tab_biplot
View(tab_biplot)
palette_biplot
runApp()
runApp()
if(input$masquer_biplot=="aucune"){tab_biplot <- rbind(biplot_li, biplot_col)}
else if (input$masquer_biplot=="périodes"){tab_biplot <-biplot_col}
else if (input$masquer_biplot=="caractéristiques fonctionnelles"){tab_biplot <-biplot_li}
rbind(biplot_li, biplot_col)
tab_biplot <- rbind(biplot_li, biplot_col)
View(tab_biplot)
palette_biplot
palette_biplot
names(palette_biplot) <- liste_var
palette_biplot
runApp()
install.packages("Cairo")
runApp()
devtools::session_info()
update.packages(ask = FALSE, checkBuilt = TRUE)
runApp()
dates_axe
dates_axe
runApp()
runApp()
typochrono <- cutree(CAH, k=nb)
classes_periodes <- typochrono %>% as.data.frame()
classes_periodes$periode <- row.names(classes_periodes)
classes_periodes$deb <- word(row.names(classes_periodes),1,sep = "\\-")%>% as.numeric()#sélection des dates avant "-" /!\ remettre -25 qui disparaît forcément
classes_periodes[grep("^-25",row.names(classes_periodes)),]$deb <- -25 # -25 remis en premières date
classes_periodes$fin <- word(row.names(classes_periodes),2,sep = "\\-")%>% as.numeric()#sélection des dates après "-" >/ erreur sur fin de la période commençant par -25
classes_periodes[grep("^-25",row.names(classes_periodes)),]$fin <- word(row.names(classes_periodes),2,sep = "\\-25-") %>% as.numeric() # -25 remis en premières date
classes_periodes[grep("^-25",row.names(classes_periodes)),]$fin
word(row.names(classes_periodes),2,sep = "\\-25-")
classes_periodes[grep("^-25",row.names(classes_periodes)),]$fin <- word(row.names(classes_periodes),2,sep = "\\-25-")[1] %>% as.numeric() # première date de fin ajustée
classes_periodes
typochrono <- cutree(CAH, k=nb)
classes_periodes <- typochrono %>% as.data.frame()
classes_periodes$periode <- row.names(classes_periodes)
classes_periodes$deb <- word(row.names(classes_periodes),1,sep = "\\-")%>% as.numeric()#sélection des dates avant "-" /!\ remettre -25 qui disparaît forcément
classes_periodes[grep("^-25",row.names(classes_periodes)),]$deb <- -25 # -25 remis en premières date
classes_periodes$fin <- word(row.names(classes_periodes),2,sep = "\\-")%>% as.numeric()#sélection des dates après "-" >/ erreur sur fin de la période commençant par -25
classes_periodes[grep("^-25",row.names(classes_periodes)),]$fin <- word(row.names(classes_periodes),2,sep = "\\-25-")[1] %>% as.numeric() # première date de fin ajustée
row.names(classes_periodes) <- NULL
colnames(classes_periodes) <- c("classes","periode","deb","fin")
classes_periodes$classes <- as.factor(classes_periodes$classes)
dates_axe <- NULL
for (i in 1:nb)
{
tab <- classes_periodes %>% filter(classes==i)
tab$deb <- as.character(tab$deb)
tab$fin <- as.character(tab$fin)
tab <- tab %>% filter(!(deb %in% fin))
dates_axe <- rbind(dates_axe,tab)
}
dates_axe$deb <- as.numeric(dates_axe$deb)
dates_axe$fin <- as.numeric(dates_axe$fin)
liste_tab <- list("entier"=classes_periodes, "axe"=dates_axe)
runApp()
runApp()
colorRampPalette(Set2)
colorRampPalette("Set2")
colorRampPalette(colors)
colorRampPalette(10)
colorRampPalette(10)
test <- colorRampPalette(Set2)
test <- colorRampPalette(brewer.pal(Set2))
test <- colorRampPalette(brewer.pal("Set2"))
brewer.pal("Set2")
brewer.pal(8,"Set2")
brewer.pal(10,"Set2")
colors <- brewer.pal(8,"Set2")
colorRampPalette(colors)
test <- colorRampPalette(colors)
test(10)
displaypal()
plot(c(1:10), colors=test(10))
plot(c(1:10), color=test(10))
warnings()
help(plot)
plot(c(1:10), col=test(10))
runApp()
plot(c(1:10), col=test(10), pch = 15, size=10)
plot(c(1:10), col=test(10), pch = 15, cex=10)
plot(c(1:15), col=test(15), pch = 15, cex=10)
runApp()
brewer.pal(8,"Set2")
brewer.pal(7,"Set2")
runApp()
runApp()
nombre_classes
runApp()
TabEcartPearsonResidus <- function(x){
x <- as.matrix(x)
x <- chisq.test(x)
x <- x$residuals
as.data.frame(x)
}
typochrono <- cutree(CAH, k=nb)
typochrono <- cutree(CAH, k=4)
CAH
CAH <- reacCAH$data
runApp()
CAH
TabEcartPearsonResidus <- function(x){
x <- as.matrix(x)
x <- chisq.test(x)
x <- x$residuals
as.data.frame(x)
}
typochrono <- cutree(CAH, k=nb)
ecarts_typo_norm <- tab_cont %>% TabEcartPearsonResidus() %>% mutate(Cluster = factor(typochrono, levels = 1:nb))
ecarts_typo_norm_class  <- ecarts_typo_norm %>% group_by(Cluster) %>% summarise_all(funs(mean))
ecarts_typo_norm_class
ecarts_typo_norm_class  <- ecarts_typo_norm %>% group_by(Cluster)
ecarts_typo_norm
library("assertthat", lib.loc="~/R/win-library/3.4")
install.packages(c("ade4", "dplyr", "ggplot2", "ggthemes", "leaflet", "reshape2", "rgdal", "RSQLite", "sf", "shinyjs", "shinyWidgets", "sp", "stringi", "stringr"))
.libPaths()
installed.packages(c("RColorBrewer",
"reshape2",
"ggthemes",
"scales",
"gridExtra",
"ggpubr",
"cowplot",
"ade4",
"wesanderson",
"dichromat",
"ggrepel",
"extrafont",
"grid",
"explor",
"ggdendro",
"plotly",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinythemes",
"htmlwidgets",
"leaflet",
"RSQLite",
"DT",
"ggthemes",
"scatterD3",
"stringi",
"rgdal",
"sf",
"xslx",
"compare",
"devtools",
"knitr",
"jsonlite",
"markdown",
"prettyunits",
"sp",
"svglite",
"tidyverse",
"tinytex",
"utf8",
"webshot",
"zip"))
installed.packages(c("RColorBrewer","reshape2")
"ggthemes",
"scales",
"gridExtra",
"ggpubr",
"cowplot",
"ade4",
"wesanderson",
"dichromat",
"ggrepel",
"extrafont",
"grid",
"explor",
"ggdendro",
"plotly",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinythemes",
"htmlwidgets",
"leaflet",
"RSQLite",
"DT",
"ggthemes",
"scatterD3",
"stringi",
"rgdal",
"sf",
"xslx",
"compare",
"devtools",
"knitr",
"jsonlite",
"markdown",
"prettyunits",
"sp",
"svglite",
"tidyverse",
"tinytex",
"utf8",
"webshot",
"zip"))
installed.packages(c("RColorBrewer","reshape2"))
install.packages(c("RColorBrewer","reshape2",
"ggthemes",
"scales",
"gridExtra",
"ggpubr",
"cowplot",
"ade4",
"wesanderson",
"dichromat",
"ggrepel",
"extrafont",
"grid",
"explor",
"ggdendro",
"plotly",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinythemes",
"htmlwidgets",
"leaflet",
"RSQLite",
"DT",
"ggthemes",
"scatterD3",
"stringi",
"rgdal",
"sf",
"xslx",
"compare",
"devtools",
"knitr",
"jsonlite",
"markdown",
"prettyunits",
"sp",
"svglite",
"tidyverse",
"tinytex",
"utf8",
"webshot",
"zip"))
shiny::runApp()
R.version()
R.Version()
library(shiny)
library(shinyjs)
install.packages(c("RColorBrewer",
"reshape2",
"ggthemes",
"scales",
"gridExtra",
"ggpubr",
"cowplot",
"ade4",
"wesanderson",
"dichromat",
"ggrepel",
"extrafont",
"explor",
"ggdendro",
"plotly",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboar,d"
"shinythemes",
"htmlwidgets",
"leaflet",
"RSQLite",
"DT",
"ggthemes",
"scatterD3",
"stringi",
"rgdal",
"sf",
"xslx",
"compare",
"devtools",
"knitr",
"jsonlite",
"markdown",
"prettyunits",
"sp",
"svglite",
"tidyverse",
"tinytex",
"utf8",
"webshot",
"zip"))
install.packages(c("RColorBrewer", "reshape2",
"ggthemes",
"scales",
"gridExtra",
"ggpubr",
"cowplot",
"ade4",
"wesanderson",
"dichromat",
"ggrepel",
"extrafont",
"explor",
"ggdendro",
"plotly",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboar,d"
"shinythemes",
"htmlwidgets",
"leaflet",
"RSQLite",
"DT",
"ggthemes",
"scatterD3",
"stringi",
"rgdal",
"sf",
"xslx",
"compare",
"devtools",
"knitr",
"jsonlite",
"markdown",
"prettyunits",
"sp",
"svglite",
"tidyverse",
"tinytex",
"utf8",
"webshot",
"zip"))
install.packages(c("RColorBrewer", "reshape2","ggthemes", "scales","gridExtra","ggpubr","cowplot","ade4","wesanderson","dichromat",
"ggrepel","extrafont","explor","ggdendro","plotly","shiny","shinyjs","shinyWidgets","shinydashboar,d""shinythemes","htmlwidgets",
"leaflet","RSQLite","DT","ggthemes","scatterD3","stringi","rgdal","sf","xslx","compare","devtools","knitr","jsonlite",
"markdown","prettyunits","sp","svglite","tidyverse","tinytex","utf8","webshot","zip"))
install.packages(c("RColorBrewer",
"reshape2",
"ggthemes",
"scales",
"gridExtra",
"ggpubr",
"cowplot",
"ade4",
"wesanderson",
"dichromat",
"ggrepel",
"extrafont",
"explor",
"ggdendro",
"plotly",
"shiny",
"shinyjs",
"shinyWidgets",
"shinydashboard",
"shinythemes",
"htmlwidgets",
"leaflet",
"RSQLite",
"DT",
"ggthemes",
"scatterD3",
"stringi",
"rgdal",
"sf",
"xslx",
"compare",
"devtools",
"knitr",
"jsonlite",
"markdown",
"prettyunits",
"sp",
"svglite",
"tidyverse",
"tinytex",
"utf8",
"webshot",
"zip"))
shiny::runApp()
par(bg = "#EFEFEF")
A2Rplot(
x=CAH,
k = input$nombre_classes,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
par(bg = "#EFEFEF")
output$plot_dendro <- renderPlot(
A2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
A2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
A2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
palette_dendro <- palette_CAH(4)
browser()
par(bg = "#EFEFEF")
A2Rplot(
x=CAH,
k = 4,
col.down = palette_dendro,
show.labels=TRUE,
main ="Dendrogramme de la CAH"
)
runApp()
#---- LIBRAIRIES ----
#librairies generales
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(shinydashboard)
library(htmlwidgets)
library(leaflet)
library(RSQLite)
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(shinydashboard)
library(htmlwidgets)
library(leaflet)
library(RSQLite)
library(dplyr)
library(dplyr)
library(tidyr)
library(DT)
library(reshape2)
library(reshape2)
library(ggplot2)
library(reshape2)
library(ggplot2)
library(ggrepel)
library(ggthemes)
library(ggdendro)
library(RColorBrewer)
library(grid)
library(gridExtra)
library(cowplot)
library(scatterD3)
library(stringi)
library(stringr)
library(ade4)
#Spatialobjects
library(rgdal)
library(sf)
library(rgdal)
install.packages(c("shinyjs",
"shinyWidgets",
"shiny",
"shinydashboard",
"leaflet",
"RSQLite",
"DT",
"ggthemes",
"ggdendro",
"cowplot",
"scatterD3",
"ade4",
"rgdal",
"sf",
"rgdal"))
shiny::runApp()
runApp()
