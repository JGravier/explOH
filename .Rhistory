1:6,
function(i){
substring(
eval(parse(text=paste("input$picker_zones_",i,sep=""))), #récupère toutes les options cochées
1,2 #ne garde que les deux premiers caractères (=les numéros)
)
})
val_usage <- lapply(
1:6,
function(i){
substring(
eval(parse(text=paste("input$picker_zones_",i,sep=""))), #récupère toutes les options cochées
1,2 #ne garde que les deux premiers caractères (=les numéros)
)
})
aste("OH de valeur d'usage :", val_usage)
paste("OH de valeur d'usage :", val_usage)
val_usage
val_usage <- lapply(
1:6,
function(i){
substring(
eval(parse(text=paste("input$picker_zones_",i,sep=""))), #récupère toutes les options cochées
1,2 #ne garde que les deux premiers caractères (=les numéros)
)
}) %>% unlist %>% as.numeric
val_usage
paste("a",val_usage)
paste(val_usage)
paste("a",paste(val_usage))
paste(val_usage, ",")
reduce(val_usage)
Reduce(val_usage)
merge(val_usage)
unlist(val_usage)
paste("OH de valeur d'usage :", unlist(val_usage))
val_usage
val_usage[1]
join(val_usage)
join(val_usages)
,.joint(val_usahes)
,.joint(val_usages)
.joint(val_usages)
.join(val_usages)
paste(val_usage, sep = '', collapse = '')
paste(val_usage, sep = ' ', collapse = '')
paste(val_usage, sep = ' ')
paste(val_usage, sep = ' ,', collapse = '')
paste(val_usage, sep = ' ,', collapse = ' ,')
paste(val_usage, sep = '', collapse = ', ')
paste("OH de valeur d'usage :", paste(val_usage, sep = '', collapse = ', '))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("ggdendro")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinycssloaders")
library(shinycssloaders)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
passwordInput("password", "Password:"),
actionButton("go", "Go"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({
req(input$go)
isolate(input$password)
})
}
shinyApp(ui, server)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(OH_zones)
runApp()
runApp()
#shapefiles contextes
ens_urb_total <- read_sf(".data/ens_urbain.geojson")
#shapefiles contextes
ens_urb_total <- st_read(".data/ens_urbain.geojson")
#shapefiles contextes
ens_urb_total <- read_sf(".data/ens_urbain.geojson", quiet=FALSE)
#shapefiles contextes
ens_urb_total <- read_sf("./data/ens_urbain.geojson", quiet=FALSE)
#shapefiles contextes
ens_urb_total <- read_sf("./data/ens_urbain.geojson", quiet=TRUE)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
unique(ens_urb$densite)
levels(ens_urb$densite)
runApp()
runApp()
runApp()
runApp()
previewColors(colorFactor(couoeurs_EU2),c("1","2","3"))
previewColors(colorFactor(couleurs_EU2,c("1","2","3"))
)
previewColors(colorFactor(couleurs_EU2,c("1","2","3")))
previewColors(colorFactor(couleurs_EU2, c("1","2","3")))
previewColors(colorFactor(couleurs_fiab, rev(order(levels(OH_geom$FIAB_DISP)))))
couleurs_EU
couleurs_EU2
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
#librairies generales
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(shinydashboard)
library(shinycssloaders)
library(shinyjqui)
library(htmlwidgets)
library(leaflet)
library(RSQLite)
library(dplyr)
library(tidyr)
library(DT)
library(reshape2)
library(ggplot2)
library(ggrepel)
library(ggthemes)
library(ggdendro)
library(RColorBrewer)
library(grid)
library(gridExtra)
library(cowplot)
library(scatterD3)
library(stringi)
library(stringr)
library(ade4)
#Spatialobjects
library(rgdal)
library(sf)
library(rgdal)
#sources fichiers
source("global_AFC.R")
source("global_zones.R")
source("charge_data.R", local=FALSE)
install.packages("tooltip")
install.packages("shinyBS")
library(shinyBS)
bsExample("Tooltips_and_Popovers")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(diffr)
install.packages("diffr")
library(diffr)
setwd("D:/Sync/1recherche/1these/SIG/VISU/shiny/test_diff")
diffr("ui.r","ui (2) .r")
diffr("ui.r","ui (2).r")
diffr("server.r","server (2).r")
diffr("charge_data.r","charge_data (2).r")
diffr("global.r","global (2).r")
diffr("global_zones.r","global_zones (2).r")
setwd("D:/Sync/1recherche/1these/SIG/VISU/shiny/explOH_13")
runApp()
shiny::runApp()
runApp()
runApp()
ens_urb_total <-  st_read(dsn="../data/ToToPI_V3.gpkg", layer="ensembles_urbains",quiet=TRUE)
#librairies generales
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(shinydashboard)
library(shinycssloaders)
library(shinyjqui)
library(htmlwidgets)
library(leaflet)
library(RSQLite)
library(dplyr)
library(tidyr)
library(DT)
library(reshape2)
library(ggplot2)
library(ggrepel)
library(ggthemes)
library(ggdendro)
library(RColorBrewer)
library(grid)
library(gridExtra)
library(cowplot)
library(scatterD3)
library(stringi)
library(stringr)
library(ade4)
#Spatialobjects
library(rgdal)
library(sf)
library(rgdal)
#sources fichiers
source("global_AFC.R")
source("global_zones.R")
source("charge_data.R", local=FALSE)
runApp()
runApp()
#shapefiles contextes
ens_urb_total <-  st_read(dsn="./data/ToToPI_V3.gpkg", layer="ensembles_urbains",quiet=TRUE)
ens_urb <- st_transform(ens_urb_total, proj_4326)
traits_rive_total <- st_read(dsn="./data/shapes", layer="traits_rive_2154", stringsAsFactors = FALSE, quiet = TRUE)
traits_rive <- st_transform(traits_rive_total, proj_4326)
poles_total <- st_read(dsn="./data/shapes", layer="poles", stringsAsFactors = FALSE, quiet = TRUE)
poles <- st_transform(poles_total, proj_4326)
#OH pour analyse zone
OH_over_app <- read.csv("./data/OH_over_app.csv", encoding="UTF-8", header=TRUE)
OH_over_exi <-read.csv("./data/OH_over_exi.csv", encoding="UTF-8", header=TRUE)
OH_over_app$densite <- factor(OH_over_app$densite, levels=c("3","2","1","0"))
#geometries riches
points <- suppressWarnings(st_read(dsn="./data/ToToPI_V3.gpkg", layer="oh_pt_uniques", quiet=TRUE))
lignes <- suppressWarnings(st_read(dsn="./data/ToToPI_V3.gpkg", layer="oh_pl_uniques", quiet=TRUE))
polygones <- suppressWarnings(st_read(dsn="./data/ToToPI_V3.gpkg", layer="oh_pg_uniques", quiet=TRUE))
#geometries riches
points <- st_read(dsn="./data/ToToPI_V3.gpkg", layer="oh_pt_uniques", quiet=TRUE)
lignes <- st_read(dsn="./data/ToToPI_V3.gpkg", layer="oh_pl_uniques", quiet=TRUE)
polygones <- st_read(dsn="./data/ToToPI_V3.gpkg", layer="oh_pg_uniques", quiet=TRUE)
OH_geom_base <- rbind(points,lignes,polygones)
OH_geom <- OH_geom_base[OH_geom_base$V_USAGE != 11
& OH_geom_base$V_USAGE < 70
& OH_geom_base$DATE_FIN > -25,]
#reprojection pour leaflet
OH_geom <- st_transform(OH_geom,proj_4326)
#ajout d'une colonne valeur urb = V_URB =>> MAPPLY ?
OH_geom$V_URB <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c(1,2,3,4,5,6),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom valeur urb = V_URB_NOM
OH_geom$V_URB_NOM <- cut (OH_geom$V_USAGE,
breaks=c(0,20,30,40,50,60,70),
labels=c("1.voirie, aménagement",
"2.structures défensives et militaires",
"3.constructions civiles",
"4.édifices religieux",
"5.lieux d'inhumation",
"6.lieux de commerce, artisanat, production"),
right=FALSE,
include.lowest = TRUE)
#ajout d'une colonne nom portee = V_URB_NOM
OH_geom$PORTEE_NOM <- cut (OH_geom$PORTEE,
breaks=c(1,2,3,4,5),
labels=c("1.petite - quartier",
"2.moyenne - ville",
"3.grande - région",
"4.exceptionnelle - pays"),
right=FALSE,
include.lowest = TRUE)
#recodage de la plus petite date = -25 # voir si nécessaire fausse les données...
OH_geom$DATE_DEB[OH_geom$DATE_DEB < -25] <- -25
#recodage de la fiab disp des OH qui se finissent en 2015
OH_geom$FIAB_DISP[OH_geom$FIAB_DISP == ""] <- 0
OH_geom$FIAB_DISP <- droplevels(OH_geom$FIAB_DISP)
#----------------------------------- 3. Listes vurb et vusage ----
EF <- st_read(dsn="./data/ToToPI_V3.gpkg", layer="thesaurus", quiet=TRUE)
#----------------------------------- 3. Listes vurb et vusage ----
EF <- st_read(suppressWarnings(dsn="./data/ToToPI_V3.gpkg", layer="thesaurus", quiet=TRUE))
#----------------------------------- 3. Listes vurb et vusage ----
EF <- suppressWarnings(st_read(dsn="./data/ToToPI_V3.gpkg", layer="thesaurus", quiet=TRUE))
sub_vurb <- EF[EF$Code_EF %in% seq(10,60,10), c("V_urbaine", "Code_EF")]
liste_vurb <- paste( substring(sub_vurb$Code_EF,1,1), # vurb en 1,2,3
".", stri_trans_totitle(sub_vurb$V_urbaine, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
liste_vurb <- liste_vurb[order(liste_vurb)]
sub_vusage <- EF[EF$Code_EF %in% unique(OH_geom$V_USAGE), c("Code_EF", "V_usage")]#pour le moment car nom_usages pas bon pour 41 et 43 (?)
liste_vusage <- paste(sub_vusage$Code_EF,
".",
stri_trans_totitle(sub_vusage$V_usage, opts_brkiter = stri_opts_brkiter(type = "sentence")), #nom vurb avec capitale
sep="")
liste_vusage <- liste_vusage[order(liste_vusage)]
runApp()
as.factor(OH_geom$FIAB_APP)
OH_geom$FIAB_DISP
levels(OH_geom$FIAB_DISP)
order(levels(OH_geom$FIAB_DISP))
palette_fiab_d <- colorFactor(couleurs_fiab, rev(order(levels(OH_geom$FIAB_DISP))))
palette_fiab_a <- colorFactor(couleurs_fiab, order(levels(OH_geom$FIAB_APP)))
order(levels(OH_geom$FIAB_APP))
OH_geom$FIAB_APP <- as.factor(OH_geom$FIAB_APP)
palette_fiab_a <- colorFactor(couleurs_fiab, order(levels(OH_geom$FIAB_APP)))
runApp()
OH_geom %>% select(-geometry, -QGIS_ID, -V_URB, - V_URB_NOM, -PORTEE_NOM)
OH_geom %>% select(V_URB)
OH_geom %>% select(-V_URB)
runApp()
runApp('D:/Sync/1recherche/1these/SIG/VISU/shiny/explOH/explOH')
runApp('D:/Sync/1recherche/1these/SIG/VISU/shiny/explOH/explOH')
runApp()
runApp()
conn <- dbConnect(dbname="./data/ToToPI_V3.gpkg")
EF <- suppressWarnings(st_read(dsn="./data/ToToPI_V3.gpkg", layer="thesaurus", quiet=TRUE))
Encoding(EF)
Encoding(EF$V_urbaine)
Encoding(EF$V_usage)
Encoding(EF$V_usage)
Encoding(EF$V_usage %>% as.character())
EF$V_usage <- Encoding(as.character(EF$V_usage))
EF$V_usage
EF <- suppressWarnings(st_read(dsn="./data/ToToPI_V3.gpkg", layer="thesaurus", quiet=TRUE))
EF
EF$V_usage <- enc2utf8(as.character(EF$V_usage))
EF$V_usage
EF <- readOGR(dsn="./data/ToToPI_V3.gpkg", layer="thesaurus", quiet=TRUE)
EF <- readOGR(dsn="./data/ToToPI_V3.gpkg", layer="thesaurus")
EF <- readOGR("./data/ToToPI_V3.gpkg","thesaurus")
EF <- src_sqlite("./data/ToToPI_V3.gpkg")
print(EF)
tbl_df(EF, "thesaurus")
EF <- src_sqlite("./data/ToToPI_V3.gpkg") %>% tbl("thesaurus")
EF
runApp()
EF[EF$Code_EF %in% seq(10,60,10), c("V_urbaine", "Code_EF")]
EF <- src_sqlite("./data/ToToPI_V3.gpkg") %>% tbl("thesaurus") %>% as.data.table()
EF <- src_sqlite("./data/ToToPI_V3.gpkg") %>% tbl("thesaurus") %>% data.table()
EF$Code_EF
EF
EF$Code_EF
EF[2]
EF[1]
EF[2]
EF
as.data.frame(EF)
as.tiblle(EF)
library(tiblle)
library(tible)
library(tibble)
as.tibble(EF)
as_tibble(EF)
EF <- src_sqlite("./data/ToToPI_V3.gpkg") %>% tbl("thesaurus") %>% as_tibble()
sub_vurb <- EF[EF$Code_EF %in% seq(10,60,10), c("V_urbaine", "Code_EF")]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
#---- LIBRAIRIES ----
#librairies generales
library(shiny)
require(c(shiny,shinyjs,shinyWidgets,shinydashboard,shinycssloaders,shinyjqui,htmlwidgets,leaflet,RSQLite,dplyr,tidyr,DT,reshape2,ggplot2,ggrepel,ggthemes,ggdendro,RColorBrewer,grid,gridExtra,cowplot,scatterD3,stringi,stringr,ade4,tibble,
))
require(c(shiny,shinyjs,shinyWidgets,shinydashboard,shinycssloaders,shinyjqui,htmlwidgets,leaflet,RSQLite,dplyr,tidyr,DT,reshape2,ggplot2,ggrepel,ggthemes,ggdendro,RColorBrewer,grid,gridExtra,cowplot,scatterD3,stringi,stringr,ade4,tibble))
install.packages(c(shiny,shinyjs,shinyWidgets,shinydashboard,shinycssloaders,shinyjqui,htmlwidgets,leaflet,RSQLite,dplyr,tidyr,DT,reshape2,ggplot2,ggrepel,ggthemes,ggdendro,RColorBrewer,grid,gridExtra,cowplot,scatterD3,stringi,stringr,ade4,tibble))
install.packages(c("shiny","shinyjs","shinyWidgets","shinydashboard","shinycssloaders","shinyjqui","htmlwidgets","leaflet","RSQLite","dplyr","tidyr","DT","reshape2","ggplot2","ggrepel","ggthemes","ggdendro","RColorBrewer","grid","gridExtra","cowplot","scatterD3","stringi","stringr","ade4","tibble","rgdal","sf","rgdal"))
shiny::runApp()
install.packages("tidyverse")
library(dplyr)
install.packages("dply")
install.packages("dplyr")
library(tidyr)
library(dplyr)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(null_row)
null_row <-NULL
#ligne NA pour addCircles de LeafletProxy
null_row <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
null_row[]<- NULL
View(null_row)
#ligne NA pour addCircles de LeafletProxy
null_row <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
null_row
null_row[1,] <- NULL
null_row[1,]
null_row[-geom,]
null_row[]
null_row[] <- NULL
View(null_row)
#ligne NA pour addCircles de LeafletProxy
null_row <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
null_row[] <- NA
View(null_row)
null_row[]
null_row[-geom]
#ligne NA pour addCircles de LeafletProxy
null_row <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
null_row[-geom]
null_row[-null_row$geom] <- NA
null_row
null_row[-null_row$geom,]
null_row$geom
null_row %>% select(-geom)
null_row %>% select(-geom) <- NA
#ligne NA pour addCircles de LeafletProxy
null_row <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
null_row <- NA
null_row
#ligne NA pour addCircles de LeafletProxy
null_row <- OH_geom[st_geometry_type(OH_geom)=="POINT",][1,]
null_row[] <- NA
null_row
st_geometry(null_row) <- st_geometry(OH_geom[st_geometry_type(OH_geom)=="POINT",][1,])
View(null_row)
null_row
runApp()
null_row
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("leaflet.extras")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
