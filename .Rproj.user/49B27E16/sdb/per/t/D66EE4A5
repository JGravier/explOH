{
    "collab_server" : "",
    "contents" : "###############################################\n## Analyses factorielles\n## Descriptions élémentaires - chapitre 6\n## L. Nahassia, 2018\n##############################################\n\n\n#chargement des tableaux de contingence -------------------------------\ntab_urb_50 <- read.table(\"./data/tab_AFC/tab_urb_50.csv\", sep=\";\", dec=\",\")\ntab_urb_25 <- read.table(\"./data/tab_AFC/tab_urb_25.csv\", sep=\";\", dec=\",\")\ntab_urb_100 <- read.table(\"./data/tab_AFC/tab_urb_100.csv\", sep=\";\", dec=\",\")\ntab_urb_exp <- read.table(\"./data/tab_AFC/tab_urb_exp.csv\", sep=\";\", dec=\",\")\ntab_usage_25 <- read.table(\"./data/tab_AFC/tab_usage_25.csv\", sep=\";\", dec=\",\")\ntab_usage_50 <- read.table(\"./data/tab_AFC/tab_usage_50.csv\", sep=\";\", dec=\",\")\ntab_usage_100 <- read.table(\"./data/tab_AFC/tab_usage_100.csv\", sep=\";\", dec=\",\")\ntab_usage_exp <- read.table(\"./data/tab_AFC/tab_usage_exp.csv\", sep=\";\", dec=\",\")\ntab_portee_25 <- read.table(\"./data/tab_AFC/tab_portee_25.csv\", sep=\";\", dec=\",\")\ntab_portee_50 <- read.table(\"./data/tab_AFC/tab_portee_50.csv\", sep=\";\", dec=\",\")\ntab_portee_100 <- read.table(\"./data/tab_AFC/tab_portee_100.csv\", sep=\";\", dec=\",\")\ntab_portee_exp <- read.table(\"./data/tab_AFC/tab_portee_exp.csv\", sep=\";\", dec=\",\")\n\n\n# summary.variance.dudi -------------------------------------------------------------------------\n# Crée un tableau pour résumer la variance expliquée par chaque axe + mise en forme pour plotter\n# Entrée : data = resultat dudi.coa\n# Sortie : data.frame avec {n° de composante, variance, % de la variance, variance résultante, factor pour couleur}\n\nsummary.variance.dudi <- function(data){\n  expected_inertia <- 100/max(data$rank)\n  summaryAFC <- data.frame(\n    COMP = seq(1,max(data$rank),1), \n    EIG = data$eig,\n    PCTVAR = 100*data$eig / sum(data$eig),\n    CUMPCTVAR = cumsum(100*data$eig / sum(data$eig)))\n  summaryAFC$CUTSCOLOR <- cut(summaryAFC$PCTVAR, breaks=c(0,expected_inertia,Inf))\n  return(summaryAFC)\n}\n\n\n# barplot.dudi.variance -----------------------------------------------------------------\n# Crée un graphique barplot de la variance expliquée par chaque axe d'un résultat d'AFC\n# Entrée : data = resultat dudi.coa + sumdata = résultat summary.variance.dudi\n# Sortie : un objet ggplot\n\n#paste(as.character(substitute(data)), # ligne pour récupérer le nom de la variable\n\nbarplot.dudi.variance <- function(data, sumdata, titre){\n  expected_inertia <- 100/max(data$rank)\n  plot <- ggplot(data=sumdata, aes(x=COMP, y=PCTVAR, fill=sumdata$CUTSCOLOR)) +\n    geom_bar(stat=\"identity\") +\n    labs(x=\"Composantes\",\n         y=\"Part de la variance expliquée\",\n         title= titre,\n         caption=\"L. Nahassia, Géographie-cités, 2018 | Sources : ToToPI, LAT, CITERES\")+\n    scale_fill_manual(values=alpha(c(\"grey60\",\"#F39C12\"), 0.8)) +\n    geom_hline(aes(yintercept=expected_inertia), colour=\"grey50\", linetype=\"dashed\")+\n    geom_text(x=max(sumdata$COMP)+0.5, \n              y=expected_inertia+2,\n              label=paste(\"inertie moyenne attendue par composante : \", round(expected_inertia, digits=2), \"%\", sep=\"\"),\n              vjust=0,\n              hjust=1,\n              colour=\"grey50\")+\n    theme_fivethirtyeight()+\n    theme_ln()\n  return(plot)\n}\n\n\n\n# ggdendrogramme2 -----------------------------------------------------------------\n# Crée un dendrogramme à partir d'un résultat de CAH  / adapté à partir du package ggdendrogramme pour expand les limites\n# Entrée : résultat d'une CAH\n# Sortie : un objet ggplot\n\nggdendrogram2 <- function (data, segments = TRUE, labels = TRUE, leaf_labels = TRUE, \n          rotate = FALSE, theme_dendro = TRUE, ...) \n{\n  dataClass <- if (inherits(data, \"dendro\")) \n    data$class\n  else class(data)\n  angle <- if (dataClass %in% c(\"dendrogram\", \"hclust\")) {\n    ifelse(rotate, 0, 90)\n  }\n  else {\n    ifelse(rotate, 90, 0)\n  }\n  hjust <- if (dataClass %in% c(\"dendrogram\", \"hclust\")) {\n    ifelse(rotate, 0, 1)\n  }\n  else {\n    0.5\n  }\n  if (!is.dendro(data)) \n    data <- dendro_data(data)\n  p <- ggplot() + geom_blank()\n  if (segments && !is.null(data$segments)) {\n    p <- p + geom_segment(data = segment(data), aes_string(x = \"x\", \n                                                           y = \"y\", xend = \"xend\", yend = \"yend\"))\n  }\n  if (leaf_labels && !is.null(data$leaf_labels)) {\n    p <- p + geom_text(data = leaf_label(data), aes_string(x = \"x\", \n                                                           y = \"y\", label = \"label\"), hjust = hjust, angle = angle, \n                       ...)\n  }\n  if (labels) {\n    p <- p + scale_x_continuous(breaks = seq_along(data$labels$label), \n                                labels = data$labels$label,\n                                expand = c(0.01,0.01))\n  }\n  if (rotate) {\n    p <- p + coord_flip()\n    p <- p + scale_y_continuous(expand = c(0.01,0))\n  }\n  else {\n    p <- p + scale_y_continuous(expand = c(0.01,0))\n  }\n  if (theme_dendro) \n    p <- p + theme_dendro()\n  p <- p + theme(axis.text.x = element_text(angle = angle, \n                                            hjust = 1)) + theme(axis.text.y = element_text(angle = angle, \n                                                                                           hjust = 1))\n  p\n}\n\n\n# indep.classes.cah -----------------------------------------------------------------\n# Crée le tableau des écarts standardisés à l'indépendance de Pearson\n# Entrée : tab_cont= tableau initial, CAH = résultat CAH, nb = nombre de classes\n# Sortie : matrice\n\nindep.classes.cah <- function(tab_cont, CAH, nb){\n  browser()\n  \n  # Fonction pour abtenir les écarts standardisés\n  TabEcartPearsonResidus <- function(x){\n    x <- as.matrix(x)\n    x <- chisq.test(x)\n    x <- x$residuals \n    as.data.frame(x)\n  }\n  \n  typochrono <- cutree(CAH, k=nb) \n  ecarts_typo_norm <- tab_cont %>% TabEcartPearsonResidus() %>% mutate(Cluster = factor(typochrono, levels = 1:nb))\n  ecarts_typo_norm_class  <- ecarts_typo_norm %>% group_by(Cluster)\n  summarise_all(funs(mean))\n  \n  return(ecarts_typo_norm_class)\n  \n}\n\n\n# classes.periodes.cah -------------------------------------------------------------------\n# Crée le tableaux recençant les appartenances de chaque périodes aux classes de la CAH\n# Entrée : CAH = résultats CAH, nb= nombre de classe\n# Sortie : $entier = tableau dans son intégralité, $axe = sous-ensembles pour légendes\n\nclasses.periodes.cah <- function(CAH, nb){\n  typochrono <- cutree(CAH, k=nb) \n  classes_periodes <- typochrono %>% as.data.frame()\n  classes_periodes$periode <- row.names(classes_periodes) \n  classes_periodes$deb <- word(row.names(classes_periodes),1,sep = \"\\\\-\")%>% as.numeric()#sélection des dates avant \"-\" /!\\ remettre -25 qui disparaît forcément\n  classes_periodes[grep(\"^-25\",row.names(classes_periodes)),]$deb <- -25 # -25 remis en premières date\n  classes_periodes$fin <- word(row.names(classes_periodes),2,sep = \"\\\\-\")%>% as.numeric()#sélection des dates après \"-\" >/ erreur sur fin de la période commençant par -25\n  classes_periodes[grep(\"^-25\",row.names(classes_periodes)),]$fin <- word(row.names(classes_periodes),2,sep = \"\\\\-25-\")[1] %>% as.numeric() # première date de fin ajustée\n  row.names(classes_periodes) <- NULL\n  colnames(classes_periodes) <- c(\"classes\",\"periode\",\"deb\",\"fin\")\n  classes_periodes$classes <- as.factor(classes_periodes$classes)\n  \n  dates_axe <- NULL\n  \n  for (i in 1:nb)\n  {\n    tab <- classes_periodes %>% filter(classes==i)\n    tab$deb <- as.character(tab$deb)\n    tab$fin <- as.character(tab$fin)\n    tab <- tab %>% filter(!(deb %in% fin))\n    dates_axe <- rbind(dates_axe,tab)\n    \n  }\n  \n  dates_axe$deb <- as.numeric(dates_axe$deb)\n  dates_axe$fin <- as.numeric(dates_axe$fin)\n  \n  liste_tab <- list(\"entier\"=classes_periodes, \"axe\"=dates_axe)\n  \n  return(liste_tab)\n  \n}\n\n\n\n",
    "created" : 1530758259646.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "923236740",
    "id" : "D66EE4A5",
    "lastKnownWriteTime" : 1531689318,
    "last_content_update" : 1531689318184,
    "path" : "D:/Sync/1recherche/1these/SIG/VISU/shiny/explOH_12/global_AFC.R",
    "project_path" : "global_AFC.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}