{
    "contents" : "################################\n# Shiny app pour afficher les objets selon le temps \n# Octobre 2016\n# chargement des données pour shiny_3_2geom\n################################\n\n\nEPSG = make_EPSG()\nproj_2154 = EPSG[which(EPSG$code == 2154), \"prj4\"]\nproj_4326 = EPSG[which(EPSG$code == 4326), \"prj4\"]\n\n\n\n#####\n## Import données \n\n## 1. Données contexte\n#Import > shapefile\nens_urb_total <- readOGR(dsn=\"./data/shapes\", layer=\"ens_urb_v2\", stringsAsFactors = FALSE)\n#récupérer uniquement les ens_urbains utilisés (utilise=TRUE)\nens_urb <- spTransform(subset(ens_urb_total, UTILISE == \"true\"), CRS(proj_4326))\n# View(ens_urb_total)\ntraits_rive_total <- readOGR(dsn=\"./data/shapes\", layer=\"traits_rive_2154\", stringsAsFactors = FALSE)\ntraits_rive <- spTransform(traits_rive_total, CRS(proj_4326))\ntraits_rive$SELEC <- iconv(traits_rive$SELEC, \"UTF-8\")\ntraits_rive$FIAB <- iconv(traits_rive$FIAB, \"UTF-8\")\n\n## 2. Objets historiques\n## PBM d'encoding (source et dest en UTF8 mais dans la connection DB est transformé :/) >> pour le moment réencodage ligne à ligne == dégueu\n\n#--------- depuis shapes (exportés ci-dessous) pour aller + vite ----\n## Attention pour le moment shape avec v_usage 11 et v_usage >70, date_deb < 0\n# OH_geom_pg <- readOGR(dsn=\"./data/OH_geom\", layer=\"OH_geom_pg\", stringsAsFactors = FALSE)\n# OH_geom_pl <- readOGR(dsn=\"./data/OH_geom\", layer=\"OH_geom_pl\", stringsAsFactors = FALSE)\n# OH_geom_pt <- readOGR(dsn=\"./data/OH_geom\", layer=\"OH_geom_pt\", stringsAsFactors = FALSE)\n#----\n\n#-------- Depuis sqlite----\n#---- connexion ----\n# db_geom <- dbConnect(SQLite(), \"data/OH_3geom.sqlite\")\n# OH <- dbGetQuery(db_geom, \"select * from OH where V_USAGE != 11 and V_USAGE < 70 and APPARITION >= -25\")\n# OH_geom_pt_source <- dbGetQuery(db_geom, \"select * from OH_pt_uniques where V_USAGE != 11 and V_USAGE < 70 and DATE_FIN >= -25\")\n# OH_geom_pl_source <- dbGetQuery(db_geom, \"select * from OH_pl_uniques where V_USAGE != 11 and V_USAGE < 70 and DATE_FIN >= -25\")\n# OH_geom_pg_source <- dbGetQuery(db_geom, \"select * from OH_pg_uniques where V_USAGE != 11 and V_USAGE < 70 and DATE_FIN >= -25\")\ndb_ponctuels <- dbConnect(SQLite(), \"data/OH_points.sqlite\")\nOH_ponctuels_source <- dbGetQuery(db_ponctuels, \"select * from OH_points where V_USAGE != 11 and V_USAGE < 70 and DATE_FIN >= -25\")\n\n#---- conversion des tables en spatial data frame ----\n\n# AVEC GEOMETRIE\n\n# #POINTS\n# liste_pt <- mapply(function(geom, id){readWKT(text=geom, id=id, p4s=proj_2154)}, OH_geom_pt_source$geom_wkt, row.names(OH_geom_pt_source))\n# tab_pt <- do.call(rbind,liste_pt)\n# OH_geom_pt <- SpatialPointsDataFrame(tab_pt, OH_geom_pt_source[,1:11],proj4string=proj_2154)\n# rm(tab_pt,liste_pt)\n# \n# #POLYGONES\n# liste_pg <- mapply(function(geom, id){readWKT(text=geom, id=id, p4s=proj_2154)}, OH_geom_pg_source$geom_wkt, row.names(OH_geom_pg_source))\n# #end.time <- Sys.time()\n# # pbm de noms d'objets trop long - l'ensemble de la description des polygones\n# names(liste_pg) <- c(1:length(liste_pg))\n# tab_pg <- do.call(rbind,liste_pg)\n# OH_geom_pg <- SpatialPolygonsDataFrame(tab_pg, OH_geom_pg_source[,1:11])\n# rm(tab_pg,liste_pg)\n# \n# #LIGNES\n# liste_pl <- mapply(function(geom, id){readWKT(text=geom, id=id, p4s=proj_2154)}, OH_geom_pl_source$geom_wkt, row.names(OH_geom_pl_source))\n# tab_pl <- do.call(rbind,liste_pl)\n# OH_geom_pl <- SpatialLinesDataFrame(tab_pl, OH_geom_pl_source[,1:11])\n# rm(tab_pl,liste_pl)\n\n#TOUT EN PONCTUEL\nliste_ponctuels <- mapply(function(geom, id){readWKT(text=geom, id=id, p4s=proj_2154)}, OH_ponctuels_source$geom_wkt, row.names(OH_ponctuels_source))\ntab_ponctuels <- do.call(rbind,liste_ponctuels)\nOH_ponctuels <- SpatialPointsDataFrame(tab_ponctuels, OH_ponctuels_source[,1:11],proj4string=proj_2154)\nrm(tab_ponctuels,liste_ponctuels)\n\n\n#---- Préparation finale des tables : projection, encodage, ajout des v_urb (à faire dans sqlite ?) ----\n\n\n#en reprojetant pour leaflet\n# OH_geom_pg_4326 <- spTransform(OH_geom_pg,CRS(proj_4326))\n# OH_geom_pl_4326 <- spTransform(OH_geom_pl,CRS(proj_4326))\n# OH_geom_pt_4326 <- spTransform(OH_geom_pt,CRS(proj_4326))\nOH_ponctuels_4326 <- spTransform(OH_ponctuels,CRS(proj_4326))\n\n#encodage (au moins faire un apply !)\n# OH_geom_pg_4326@data$NOM <- iconv(OH_geom_pg_4326@data$NOM, \"UTF-8\")\n# OH_geom_pg_4326@data$NOM_USAGE <- iconv(OH_geom_pg_4326@data$NOM_USAGE, \"UTF-8\")\n# OH_geom_pl_4326@data$NOM <- iconv(OH_geom_pl_4326@data$NOM, \"UTF-8\")\n# OH_geom_pl_4326@data$NOM_USAGE <- iconv(OH_geom_pl_4326@data$NOM_USAGE, \"UTF-8\")\n# OH_geom_pt_4326@data$NOM <- iconv(OH_geom_pt_4326@data$NOM, \"UTF-8\")\n# OH_geom_pt_4326@data$NOM_USAGE <- iconv(OH_geom_pt_4326@data$NOM_USAGE, \"UTF-8\")\nOH_ponctuels_4326@data$NOM <- iconv(OH_ponctuels_4326@data$NOM, \"UTF-8\")\nOH_ponctuels_4326@data$NOM_USAGE <- iconv(OH_ponctuels_4326@data$NOM_USAGE, \"UTF-8\")\n\n\n#ajout d'une colonne valeur urb = V_URB =>> MAPPLY ?\n\n# OH_geom_pg_4326$V_URB <- cut (OH_geom_pg_4326$V_USAGE,\n#                               breaks=c(0,20,30,40,50,60,70),\n#                               labels=c(1,2,3,4,5,6),\n#                               right=FALSE,\n#                               include.lowest = TRUE)\n# \n# OH_geom_pt_4326$V_URB <- cut (OH_geom_pt_4326$V_USAGE,\n#                               breaks=c(0,20,30,40,50,60,70),\n#                               labels=c(1,2,3,4,5,6),\n#                               right=FALSE,\n#                               include.lowest = TRUE)\n# \n# OH_geom_pl_4326$V_URB <- cut (OH_geom_pl_4326$V_USAGE,\n#                               breaks=c(0,20,30,40,50,60,70),\n#                               labels=c(1,2,3,4,5,6),\n#                               right=FALSE,\n#                               include.lowest = TRUE)\n\nOH_ponctuels_4326$V_URB <- cut (OH_ponctuels_4326$V_USAGE,\n                                breaks=c(0,20,30,40,50,60,70),\n                                labels=c(1,2,3,4,5,6),\n                                right=FALSE,\n                                include.lowest = TRUE)\n\n\n\n#ajout d'une colonne nom valeur urb = V_URB_NOM\n\n# OH_geom_pg_4326$V_URB_NOM <- cut (OH_geom_pg_4326$V_USAGE,\n#                                   breaks=c(0,20,30,40,50,60,70),\n#                                   labels=c(\"voirie, aménagement\",\n#                                            \"structures défensives et militaires\",\n#                                            \"constructions civiles\",\n#                                            \"édifices religieux\",\n#                                            \"lieux d'inhumation\",\n#                                            \"lieux de commerce, artisanat, production\"),\n#                                   right=FALSE,\n#                                   include.lowest = TRUE)\n# \n# OH_geom_pt_4326$V_URB_NOM <- cut (OH_geom_pt_4326$V_USAGE,\n#                                   breaks=c(0,20,30,40,50,60,70),\n#                                   labels=c(\"voirie, aménagement\",\n#                                            \"structures défensives et militaires\",\n#                                            \"constructions civiles\",\n#                                            \"édifices religieux\",\n#                                            \"lieux d'inhumation\",\n#                                            \"lieux de commerce, artisanat, production\"),\n#                                   right=FALSE,\n#                                   include.lowest = TRUE)\n# \n# OH_geom_pl_4326$V_URB_NOM <- cut (OH_geom_pl_4326$V_USAGE,\n#                                   breaks=c(0,20,30,40,50,60,70),\n#                                   labels=c(\"voirie, aménagement\",\n#                                            \"structures défensives et militaires\",\n#                                            \"constructions civiles\",\n#                                            \"édifices religieux\",\n#                                            \"lieux d'inhumation\",\n#                                            \"lieux de commerce, artisanat, production\"),\n#                                   right=FALSE,\n#                                   include.lowest = TRUE)\n\nOH_ponctuels_4326$V_URB_NOM <- cut (OH_ponctuels_4326$V_USAGE,\n                                    breaks=c(0,20,30,40,50,60,70),\n                                    labels=c(\"voirie, aménagement\",\n                                             \"structures défensives et militaires\",\n                                             \"constructions civiles\",\n                                             \"édifices religieux\",\n                                             \"lieux d'inhumation\",\n                                             \"lieux de commerce, artisanat, production\"),\n                                    right=FALSE,\n                                    include.lowest = TRUE)\n\n#recodage de la plus petite date = -25\n# OH_geom_pt_4326@data$DATE_DEB[OH_geom_pt_4326@data$DATE_DEB < -25] <- -25\n# OH_geom_pg_4326@data$DATE_DEB[OH_geom_pg_4326@data$DATE_DEB < -25] <- -25\n# OH_geom_pl_4326@data$DATE_DEB[OH_geom_pl_4326@data$DATE_DEB < -25] <- -25\nOH_ponctuels_4326@data$DATE_DEB[OH_ponctuels_4326@data$DATE_DEB < -25] <- -25\n\n\n# \n# #enregistrement en shapefile pour accélerer les test\n# writeOGR(obj=OH_geom_pg, dsn=\"./data/OH_geom\", layer=\"OH_geom_pg\", driver='ESRI Shapefile', overwrite_layer=TRUE)\n# writeOGR(obj=OH_geom_pt, dsn=\"./data/OH_geom\", layer=\"OH_geom_pt\", driver='ESRI Shapefile')\n# writeOGR(obj=OH_geom_pl, dsn=\"./data/OH_geom\", layer=\"OH_geom_pl\", driver='ESRI Shapefile')\n# \n# \n# #FONDS DE CARTE\n# hydro_20 <- readOGR(dsn=\"./data\", layer=\"hydro_20_cm\", stringsAsFactors = FALSE)\n# P20_bati <- readOGR(dsn=\"./data\", layer=\"P20_bati_cm\", stringsAsFactors = FALSE)\n# P20_parcelles <- readOGR(dsn=\"./data\", layer=\"P20_parcelles_cm\", stringsAsFactors = FALSE)\n# pg_RGF932 <- readOGR(dsn=\"./data\", layer=\"cad_RGF93\", stringsAsFactors = FALSE)\n# P19_ilots <- readOGR(dsn=\"./data\", layer=\"P19_cad_ilots\", stringsAsFactors = FALSE)\n",
    "created" : 1461791680281.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "30|65|34|91|\n",
    "hash" : "1920735382",
    "id" : "D3028DED",
    "lastKnownWriteTime" : 1481036185,
    "path" : "C:/Users/lue/Sync/1recherche/1these/SIG/VISU/visu_temps/shiny_3_2geom/charge_data.r",
    "project_path" : "charge_data.r",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}