{
    "collab_server" : "",
    "contents" : "\n##data\n# addPolygons(data=ens_urb_sub$tab,\n#             group=\"ensembles urbains\",\n#             color=\"black\",\n#             fill=FALSE,\n#             weight=2,\n#             popup=pop_ens_urb) %>%\n# # \n# addPolylines(data=traits_rive$tab,\n#             group=\"traits de rive\",\n#             color=\"blue\",#pointillés ?\n#             weight=3) %>%\n# \n# addPolylines(data=traits_rive$tab,\n#              group=\"rive\",\n#              color=\"blue\",\n#              weight=2 #pointillés ? \n#              ) %>% \n# \n# addCircles(data=OH_ponctuels$tab, \n#            group=\"ponctuels\",\n#            radius=10, \n#            color=\"#ffa500\", \n#            stroke = FALSE,\n#            fillOpacity = 0.7,\n#            popup=pop_ponctuels) %>% # voir si on peut pas faire qqchose de mieux rapport au niveau de zoom\n# \n# addPolygons(data=OH_pg$tab,\n#             group=\"geometries\",\n#             stroke = TRUE, \n#             weight=1, \n#             opacity = 0.5, \n#             color = \"red\",  \n#             popup=pop_pg) %>% \n# \n# addCircles(data=OH_pt$tab, \n#            group=\"geometries\",\n#            radius=10, \n#            color=\"red\", \n#            stroke = FALSE, \n#            fillOpacity = 0.7,\n#            popup=pop_pt) %>% # voir si on peut pas faire qqchose de mieux rapport au niveau de zoom\n# \n# addPolylines(data=OH_pl$tab, \n#              group=\"geometries\",\n#              weight=1,\n#              color=\"red\",\n#              opacity= 0.7, \n#              popup=pop_pl) %>% \n\n\nView(traits_rive@data)\n\n\nView(subset(traits_rive, DEBUT<=0 & FIN>=200))\n       \n#---- diminuer le temps d'affichage du plot nombre d'OH ----\n\n#longueur actuelle,avec facette sans sélection affichée\nlibrary(ggplotly)\nbenchplot(\nplot <- ggplot(data = m_fonction_an, aes(x=annee, y=value, fill=variable))+\n  geom_bar(stat = \"identity\",\n           width=1)+\n  scale_fill_manual(values=adjustcolor(palette, alpha.f=0.8))+\n  ggtitle(\"Nombre d'OH par année et par valeur urbaine\")+\n  xlab(\"année\")+\n  ylab(\"Nombre d'OH\")+\n  theme_hc()+\n  theme_facettes_clair()+\n  facet_wrap(~v_urb, nrow=2)\n)\nggplotly(plot)\n\nbenchplot(plot)\n\n#Avec ggvis : plus long ! + controle de la couleur doit être externalisé dans le DF\nlibrary(ggvis)#pas de faceting\nmax(m_fonction_an$value)\n\nm_fonction_an %>% \n  ggvis(x=~annee, y=~value, fill=~v_urb) %>% \n  # layer_points(fill=~factor(m_fonction_an$v_urb))\n  group_by(v_urb) %>% \n  layer_bars(strokeOpacity = 0)\n\n\n#avec plotly : # a combiner pour les futurs plots avec ggplot\nlibrary(plotly)\nplot_ly(m_fonction_an,\n        x=~annee, \n        y=~value, \n        color=~v_urb, \n        type='bar')\n\n\n\ntest <- subset(nb_fonction_an, nb_fonction_an$annee<=300 & nb_fonction_an$annee>=100)\nhead(test)\ncolnames(test) <-(c(\"v1\",\"v2\",\"v3\", \"v4\", \"v5\", \"v6\", \"annee\", \"somme\"))\nbenchplot(\n  \n  ggplot(data = m_fonction_an, aes(x=annee, y=value))+\n    geom_bar(data = m_fonction_an, \n             aes(x=annee, y=value, fill= m_fonction_an$value[annee<=300 & annee>=100,]),\n             stat=\"identity\", \n             width=1) +\n   \n    # scale_fill_manual(values= c(\"#CDD2D4\", adjustcolor(palette, alpha=0.8)))+\n    ggtitle(\"Nombre d'OH par année et par valeur urbaine\")+\n    xlab(\"année\")+\n    ylab(\"Nombre d'OH\")+\n\n    facet_wrap(~ v_urb, nrow=2)\n\n)\n \n",
    "created" : 1486719042371.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2343622596",
    "id" : "936FC87",
    "lastKnownWriteTime" : 1490284495,
    "last_content_update" : 1490284495640,
    "path" : "C:/Users/lue/Sync/1recherche/1these/SIG/VISU/shiny/ExplOH_5_publi/tests.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}