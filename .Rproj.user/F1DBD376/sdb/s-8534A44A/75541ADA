{
    "collab_server" : "",
    "contents" : "################################\n# Shiny app pour afficher les objets selon le temps avec leaflet\n# juin 2017\n# Server pour explOH_7\n################################\n\n#####\nlibrary(shiny)\n\n\n\n\nshinyServer(function(input, output, session) {\n  \n  #1. carte de base\n  output$map <- renderLeaflet({\n    leaflet() %>%\n      setView(lat=47.394211, lng=0.687247, zoom = 15) %>%\n      \n      ##tiles\n      addProviderTiles(\"CartoDB.Positron\", group=\"clair\") %>%\n      # addProviderTiles(\"Esri.WorldImagery\", group = \"satellite\") %>%\n      \n      ##layer control\n      addLayersControl(\n        baseGroups = c(\"clair\", \"satellite\"),\n        overlayGroups = c(\"géometries\", \"ensembles urbains\", \"traits de rive\"),\n        options=layersControlOptions(autoZIndex=TRUE)\n      ) %>%\n      hideGroup(c(\"traits de rive\",\"ensembles urbains\"))  \n    \n    \n  })\n  \n  \n  #2. Declaration des reactive objects\n  \n  #OH (au début toutes dates toutes valeurs urbaines)\n  OH_subset <- reactiveValues(\n    tab = OH_geom\n  )\n  #contexte\n  ens_urb_subset <- reactiveValues(tab = ens_urb)\n  traits_rive_subset <- reactiveValues(tab = traits_rive)\n  #couleurs\n  legende <- reactiveValues(\n    couleurs_pt = NA,\n    couleurs_pg = NA,\n    couleurs_pl= NA,\n    alpha_polygones = NA,\n    pal_legend = NA,\n    val_legend = NA,\n    title_legend = NA)\n  \n  observe({\n    updateTextInput(session,\"test\", value=nrow(OH_subset$tab))\n    \n  })\n  #3. INPUT > INPUT : Mise à jour slider temps selon autres éléments (graphes et élements textes)\n  \n  # observe({\n  #   req(input$ohfreq_brush$xmin,input$ohfreq_brush$xmax)\n  #   updateSliderInput(session = session,\n  #                     inputId = \"limites\",\n  #                     # value=c(subset_limites_temps$date_min,subset_limites_temps$date_max)\n  #                     value=c(input$ohfreq_brush$xmin,input$ohfreq_brush$xmax)\n  #   )\n  # })\n  \n  \n  # observeEvent(input$selec_bornes_temps, {\n  #   req(input$borne_temps_1, input$borne_temps_2)\n  #   updateSliderInput(session = session,\n  #                     inputId = \"limites\",\n  #                     # value=c(subset_limites_temps$date_min,subset_limites_temps$date_max)\n  #                     value=c(input$borne_temps_1,input$borne_temps_2))\n  # })\n  \n  #4. INPUT > DONNEES : sélection des subset en fonction des INPUTS\n  \n  ##contextes (temps)\n  observe({\n    # req(max(input$limites), min(input$limites))\n    ens_urb_subset$tab <- ens_urb %>% filter (date_debut<=max(input$limites) & date_fin>=min(input$limites))\n    traits_rive_subset$tab <- traits_rive %>% filter (DEBUT<=max(input$limites) & FIN>=min(input$limites))\n    \n  })\n  \n  ##Objets Historiques (temps, fonctions)\n  observe({\n    # req(max(input$limites), min(input$limites), input$choix_fonctions)\n    #quel que soit l'élément - temporel ou fonctionnel - qui change, tout le subset est recalculé = reste le + rapide\n    OH_subset$tab <- OH_geom %>%\n      filter(DATE_DEB<=max(input$limites)) %>%\n      filter(DATE_FIN>=min(input$limites)) %>%\n      filter(V_URB %in% c(input$choix_fonctions[1:6]))\n    \n  })\n  \n  \n  #5. INPUT > OUTPUT\n  \n  #COULEURS LEGENDE SELON CHOIX\n  observe ({\n    \n    OH_pt <- OH_subset$tab[st_geometry_type(OH_subset$tab)==\"POINT\",]\n    OH_pg <- OH_subset$tab[st_geometry_type(OH_subset$tab)==\"MULTIPOLYGON\",]\n    OH_pl <- OH_subset$tab[st_geometry_type(OH_subset$tab)==\"MULTILINESTRING\",]\n    \n    if (input$couleur_OH == \"v_urb\") # afficher selon valeurs urbaines\n    {\n      legende$couleurs_pt <- ~palette_fonctions(OH_pt$V_URB_NOM)\n      legende$couleurs_pg <- ~palette_fonctions(OH_pg$V_URB_NOM)\n      legende$couleurs_pl <- ~palette_fonctions(OH_pl$V_URB_NOM)\n      legende$alpha_polygones <- 0.7\n      legende$pal_legend <- palette_fonctions\n      legende$val_legend <- OH_subset$tab$V_URB_NOM\n      legende$title_legend <- \"Valeurs urbaines des OH\"}\n    \n    else if (input$couleur_OH == \"portee\") # afficher selon portée\n    {\n      legende$couleurs_pt <- ~palette_portees(OH_pt$PORTEE)\n      legende$couleurs_pg <- ~palette_portees(OH_pg$PORTEE)\n      legende$couleurs_pl <- ~palette_portees(OH_pl$PORTEE)\n      legende$alpha_polygones <- 0.9\n      legende$pal_legend <- palette_portees\n      legende$val_legend <- OH_subset$tab$PORTEE\n      legende$title_legend <- \"Niveau de portée des OH (1=min, 4=max)\"}\n    \n    else if (input$couleur_OH == \"duree\") # afficher selon durée d'existence REVOIR CETTE LEGENDE\n      #couleurs calculées sur le même intervalle (le plus global == OHgeom) sinon cela devrait donner une légende différente pour chaque type de geom\n    {\n      legende$couleurs  <- ~ramp_duree(OH_subset$tab$DATE_FIN - OH_g_subset$tab$DATE_DEB)\n      legende$alpha_polygones <- 0.8\n      legende$pal_legend <- ramp_duree\n      legende$val_legend <- (OH_subset$tab$DATE_FIN - OH_subset$tab$DATE_DEB)\n      legende$title_legend <- \"Durée d'existence des OH\"}\n    \n  })\n  \n  \n  #MAP OUTPUT\n  observe ({\n    \n    OH_pt <- OH_subset$tab[st_geometry_type(OH_subset$tab)==\"POINT\",] %>% st_cast(\"POINT\") #cast pour éviter les erreurs de class non comprises par leaflet\n    OH_pg <- OH_subset$tab[st_geometry_type(OH_subset$tab)==\"MULTIPOLYGON\",] %>% st_cast(\"MULTIPOLYGON\")\n    OH_pl <- OH_subset$tab[st_geometry_type(OH_subset$tab)==\"MULTILINESTRING\",] %>% st_cast(\"MULTILINESTRING\")\n    \n    ## POPUP\n    popup_ens_urb <- texte_popup_ens_urb(ens_urb_subset$tab)\n    popup_traits_rive <- texte_popup_traits_rive(traits_rive_subset$tab)\n    popup_pg <-texte_popup_OH(OH_pg)\n    popup_pl <-texte_popup_OH(OH_pl)\n    popup_pt <-texte_popup_OH(OH_pt)\n    \n    ## CARTE\n    leafletProxy(\"map\") %>%\n      clearShapes() %>%\n      clearMarkers() %>%\n      clearControls() %>%\n      addPolygons(data=OH_pg,\n                  stroke = TRUE,\n                  weight=1,\n                  opacity=legende$alpha_polygones,\n                  color=legende$couleurs_pg,\n                  group=\"géometries\",\n                  popup=popup_pg) %>%\n      addCircles(data=OH_pt,\n                 radius=10,\n                 color=legende$couleurs_pt,\n                 stroke = FALSE,\n                 fillOpacity = 0.7,\n                 group=\"géometries\",\n                 popup=popup_pt) %>%\n      addPolylines(data=OH_pl,\n                   weight=1,\n                   color=legende$couleurs_pl,\n                   opacity= 0.7,\n                   group=\"géometries\",\n                   popup = popup_pl) %>%\n      \n      addLegend(position=\"bottomlef\", title = legende$title_legend, pal = legende$pal_legend, values = legende$val_legend, opacity = 1) %>%\n      \n      addPolygons(data=ens_urb_subset$tab,\n                  group=\"ensembles urbains\",\n                  color=\"black\",\n                  fill=FALSE,\n                  weight=2,\n                  popup=popup_ens_urb\n      ) %>%\n      addPolylines(data=traits_rive_subset$tab,\n                   group=\"traits de rive\",\n                   color=\"blue\",#pointillés ?\n                   weight=3,\n                   popup=popup_traits_rive\n      )\n    #possible d'ajouter className pour css\n    #possible d'ajouter un ID pour suppprimer + spécifiquement cette légende\n  })\n  \n  \n  #6. INTERACTIONS AUTRES\n  \n  # mise en valeur de l'OH sélectionnée >> à gérer par rapport à la géométrie : zoom sur bounding box de la geom / mise en valeur des points et geom\n  observeEvent(input$selec_OH, {\n    \n    #*******\n    #A FAIRE\n    #catch si pas numéro > ifelse sur typeof de la variable\n    # voir si zoom sur bouding box (pbm avec les points et les petits polygones)\n    #*******\n    \n    ## selection selon le type de géométrie\n    leafletProxy(\"map\") %>% clearGroup(\"selection\")\n    choix_OH <- as.numeric(input$num_OH)\n    \n    if (st_geometry_type(OH_subset$tab[OH_subset$tab$OH_NUM == choix_OH,])==\"MULTIPOLYGON\") {\n      \n      this.OH_geom <- OH_subset$tab[OH_subset$tab$OH_NUM == choix_OH,] %>% st_cast(\"MULTIPOLYGON\")\n      # this.OH_ponctuel <- subset(OH_ponctuels_subset$tab, OH_NUM ==  choix_OH)\n      this.coords <- st_coordinates(this.OH_geom)\n      this.x <-  this.coords[1]\n      this.y <- this.coords[2]\n      this.popup <- texte_popup_OH(this.OH_geom)  ## POPUP\n      \n      leafletProxy(\"map\") %>%\n        setView(lat=this.y, lng=this.x, zoom = 18) %>%\n        addPolygons(data=this.OH_geom,\n                    stroke = TRUE,\n                    color= \"black\",\n                    opacity= 0.7,\n                    weight= 5,\n                    fill = FALSE,\n                    group=\"selection\",\n                    popup=this.popup)\n      \n      \n    }\n    \n    else if (st_geometry_type(OH_subset$tab[OH_subset$tab$OH_NUM == choix_OH,])==\"MULTILINESTRING\") {\n      \n      this.OH_geom <- OH_subset$tab[OH_subset$tab$OH_NUM == choix_OH,] %>% st_cast(\"MULTILINESTRING\")\n      # this.OH_ponctuel <- subset(OH_ponctuels_subset$tab, OH_NUM ==  choix_OH)\n      this.coords <- st_coordinates(this.OH_geom)\n      this.x <-  this.coords[1]\n      this.y <- this.coords[2]\n      this.popup <- texte_popup_OH(this.OH_geom)\n      \n      leafletProxy(\"map\") %>%\n        setView(lat=this.y, lng=this.x, zoom = 18) %>%\n        addPolylines(data=this.OH_geom,\n                     weight=4,\n                     stroke=\"black\",\n                     group=\"selection\",\n                     popup=this.popup)\n      \n    }\n    \n    else if (st_geometry_type(OH_subset$tab[OH_subset$tab$OH_NUM == choix_OH,])==\"POINT\") {\n      \n      this.OH_geom <- OH_subset$tab[OH_subset$tab$OH_NUM == choix_OH,] %>% st_cast(\"POINT\")\n      # this.OH_ponctuel <- subset(OH_ponctuels_subset$tab, OH_NUM ==  choix_OH)\n      this.coords <- st_coordinates(this.OH_geom)\n      this.x <-  this.coords[1]\n      this.y <- this.coords[2]\n      this.popup <- texte_popup_OH(this.OH_geom)\n      \n      leafletProxy(\"map\") %>%\n        setView(lat=this.y, lng=this.x, zoom = 18) %>%\n        addCircles(data=this.OH_geom,\n                   radius=10,\n                   stroke = TRUE,\n                   color= \"black\",\n                   opacity= 0.7,\n                   weight= 5,\n                   fill = FALSE,\n                   group=\"selection\",\n                   popup=this.popup)\n      \n      \n    }\n    \n    else {updateTextInput(session, \"num_OH\", value = \"aucun OH correspondant\")}\n    \n  })\n  \n  #suppression selection\n  observeEvent(input$deselec_OH, {leafletProxy(\"map\") %>% clearGroup(\"selection\")})\n  \n})\n\n\n",
    "created" : 1497450542103.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2017037136",
    "id" : "75541ADA",
    "lastKnownWriteTime" : 1497451880,
    "last_content_update" : 1497451880296,
    "path" : "C:/Users/lue/Sync/1recherche/1these/SIG/VISU/shiny/explOH_7/server.r",
    "project_path" : "server.r",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}